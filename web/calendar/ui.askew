<!--title: Web Components
Now we need do implement the Web Client UI for our module.
This file will be processed by [askew][3] and contains components described via augmented HTML.
Here we define the UI that will be used to control our module.

Our HTML should be a table with three rows:
One for the day, one for the month and one for the year.
For each row, we want to have three buttons in each direction for altering the date.
Let's write a component that describes such a row.
-->

<a:import>
  "github.com/QuestScreen/api/web"
</a:import>

<!--
We'll need this import later â€“ it works just like a Go import.
-->

<a:macro name="calendarRow">
  <tr><td colspan="7" a:assign="prop(textContent)=kind.String()"></td></tr>
  <tr>
    <td>
      <button a:capture="click:step(go(o.kind), go(-10)) {preventDefault}"
          ><i class="fas fa-angle-double-left"></i> 10</button>
    </td>
    <td>
      <button a:capture="click:step(go(o.kind), go(-3)) {preventDefault}"
          ><i class="fas fa-angle-double-left"></i> 3</button>
    </td>
    <td>
      <button a:capture="click:step(go(o.kind), go(-1)) {preventDefault}"
          ><i class="fas fa-angle-left"></i> 1</button>
    </td>
    <a:slot name="caption"></a:slot>
    <td>
      <button a:capture="click:step(go(o.kind), go(1)) {preventDefault}"
          >1 <i class="fas fa-angle-right"></i></button>
    </td>
    <td>
      <button a:capture="click:step(go(o.kind), go(3)) {preventDefault}"
          >3 <i class="fas fa-angle-double-right"></i></button>
    </td>
    <td>
      <button a:capture="click:step(go(o.kind), go(10)) {preventDefault}"
          >10 <i class="fas fa-angle-double-right"></i></button>
    </td>
  </tr>
</a:macro>

<!--
First, we create a macro that describes the general layout of a row.
It actually consists of two `<tr>`s, the first one showing the centered row caption and the second one containing the buttons and current value.
There are three buttons to the left and another three to the right of the value.

We get the row caption from a go expression `kind.Caption()`.
We will see shortly where `kind` comes from.

For the buttons, we are using [Font Awesome][1], which is bundled with the Web Client, for icons.
The buttons also have a special `a:capture` attribute, which tells askew that a click on this button shall call a `step` function when a button is clicked.
We retrieve a `kind` value with the `go(o.kind)` binding, and also give the wanted amount of steps for each button.

Where do `step` and `o.kind` come from?
Well, we don't define them here because this is just a macro.
We will use that macro for defining two components that each define both `step` and `o.kind`:
-->

<a:component name="intRow" params="var kind RowKind" gen-new-init>
  <a:controller>
    step(kind RowKind, amount int)
  </a:controller>
  <a:include name="calendarRow">
    <td a:slot="caption" a:bindings="prop(textContent):(value int)"></td>
  </a:include>
</a:component>

<a:component name="stringRow" params="var kind RowKind" gen-new-init>
  <a:controller>
    step(kind RowKind, amount int)
  </a:controller>
  <a:include name="calendarRow">
    <td a:slot="caption" a:bindings="prop(textContent):(value string)"></td>
  </a:include>
</a:component>

<!--
Since months are given as string, but day and year as integer, we need to components with differently typed caption.
The only difference here is that we bind the `textContent` attribute of our caption `<td>` to a different type.

Both components have a parameter `var kind RowKind`.
`RowKind` will be an enumeration describing whether it's the day, month or year row - we will define this type later in our Go code.
The `var` modifier makes the parameter to be a field of the component type, so that we can access it via `o.kind`.

The `<a:controller>` describes the events the component can emit as Go functions.
A type that implements these functions can be the controller of an instance of one of the components and then receives these events.
The only func we define is `step`, which shall move the value of the row of the given kind the given amount of steps.

Now we see where both `step` and `o.kind` that we used in the macro come from.
Using our row components, we can now define the component that contains our complete ui:
-->

<a:component name="calendarUI" params="var srv web.Server">
  <table class="qstut-calendar">
    <tbody>
      <a:embed name="days"   type="intRow" args="DayRow" control></a:embed>
      <a:embed name="months" type="stringRow" args="MonthRow" control></a:embed>
      <a:embed name="years"  type="intRow" args="YearRow" control></a:embed>
    </tbody>
  </table>
</a:component>

<!--
We're using the CSS class we defined in `style.css`.
QuestScreen also has [Pure CSS][2] bundled which can be used for more complex layouts.

With `<a:embed>`, we embed our row component three times in the table, with the correct kind as argument.
With the `control` attribute, we make the `calendarUI` component be the controller of the embedded components.
This means that it will receive the calls to `step` that are issued by the buttons.

The parameter of this component is `srv`, our interface to the server.
We need to store this so that we can communicate with the server when a button
is clicked.

 [1]: https://fontawesome.com/
 [2]: https://purecss.io/
 [3]: https://github.com/flyx/askew
-->